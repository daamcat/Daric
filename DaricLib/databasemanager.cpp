#include "databasemanager.h"
#include "MySqlTableModel2.h"

#include <QSqlDatabase>
#include <QString>
#include <QDebug>
#include <QStringList>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlRecord>
#include <QSqlIndex>
#include <QSqlField>

DatabaseManager::DatabaseManager(const QString &databaseName)
{
    m_databaseConnectionDefault = QSqlDatabase::addDatabase("QSQLITE");
    m_databaseConnectionDefault.setDatabaseName(databaseName);
    if (m_databaseConnectionDefault.open() == false)
    {
        qDebug()<<"Connection to database failed.";
    }

    m_tableModel = new MySqlTableModel2(nullptr,m_databaseConnectionDefault);
    m_tableModel->setEditStrategy(QSqlTableModel::EditStrategy::OnManualSubmit);

    m_tableNames = m_databaseConnectionDefault.tables(QSql::Tables);
    if (!m_tableNames.isEmpty())
    {
        setDatabaseTableInModel(m_tableNames.first());
    }

    // Connection for property tables:
    m_databaseConnectionForPropertiesTables = QSqlDatabase::addDatabase("QSQLITE", "cnn2");
    m_databaseConnectionForPropertiesTables.setDatabaseName(databaseName);
    // We don't open this connection yet!
}

DatabaseManager::~DatabaseManager()
{
    qDebug()<<"DatabaseManager destructor is called.";
}

QString DatabaseManager::getSelectedTableName()
{
    return m_selectedTableName;
}
void DatabaseManager::setDatabaseTableInModel(const QString &databaseTableName)
{
    m_selectedTableName = databaseTableName;
    // Select to which database table the model must fit (the data in model doesn't get updated):
    m_tableModel->setTable(m_selectedTableName);
    // Update the data in model with respect to the data in given database table:
    m_tableModel->select();

    emit signalTableChanged(m_tableModel->getHeaderNames());
}


QStringList DatabaseManager::getTableNames()
{
    return m_tableNames;
}

MySqlTableModel2* DatabaseManager::getTableModel(const QString &tableName)
{
    setDatabaseTableInModel(tableName);
    const QString propertyTableName = tableName + m_config.tableNamePropertiesEnding;
    if (m_tableNames.contains(propertyTableName))
    {
        readTablePropertiesFromDatabase(propertyTableName);
    }
    return m_tableModel;
}

MySqlTableModel2* DatabaseManager::getCurrentTableModel()
{
    return m_tableModel;
}





QMap<QString,Field> DatabaseManager::getTableProperties()
{
    return m_tableProperties;
}


void DatabaseManager::readTablePropertiesFromDatabase(const QString &tableName)
{
    m_tableProperties.clear(); // Initially!
    if (m_databaseConnectionForPropertiesTables.open() == false)
    {
        qDebug()<<"Connection to database failed.";
        return;
    }

    MySqlTableModel2 *tableModel = new MySqlTableModel2(nullptr,m_databaseConnectionForPropertiesTables);

    if (!tableModel)
    {
        qDebug()<<"Table model is null.";
        return;
    }
    if (!m_databaseConnectionForPropertiesTables.isValid())
    {
        qDebug()<<"Connection is not valid.";
        return;
    }
    tableModel->setTable(tableName);
    tableModel->select(); // Shouldn't be forgotten!!! "...to populate the model with data."
    int rowCount = tableModel->rowCount();

    QVector<QString> elements = Field::elements();
    for (int i = 0; i<rowCount; i++)
        // As many as the number of rows in table_properties,...
        // As many as the number of columns in table,...
    {
        Field field;
        QSqlRecord record = tableModel->record(i);
        field.fieldName = record.value(elements.at(0)).toString();
        field.fieldHeaderViewName = record.value(elements.at(1)).toString();
        field.dataType = record.value(elements.at(2)).toString();
        field.properties = record.value(elements.at(3)).toString();
        field.editable = record.value(elements.at(4)).toInt();
        field.foreignKey = record.value(elements.at(5)).toInt();
        field.displayType = DisplayType::intToEnum(record.value(elements.at(6)).toInt());
        field.nullValid = record.value(elements.at(7)).toInt();
        field.autoGenerated = record.value(elements.at(8)).toInt();

        m_tableProperties[field.fieldName] = field;
    }

    m_databaseConnectionForPropertiesTables.close();
}
